---
- name: 2.0 RENDER AND DISPLAY SEGMENT ROUTING CONFIGURATION
  debug:
    msg: 
    - "template: {{ templates[0] }}"
    - "{{ lookup('template', templates[0]).split('\n') }}"

- name: 2.1 RENDER AND SAVE THE SEGMENT ROUTING CONFIGURATION
  template:
    src: "{{ templates[0] }}"
    dest: "xrcfg/{{ hostname }}.sr.xrcfg"
  register: output

- name: "{{ slow_secs }} secs PAUSE FOR CONVERGENCE"
  ansible.builtin.pause:
    seconds: "{{ slow_secs }}"

- name: 2.2 DISPLAY THE OUTPUT REGISTERED IN THE PREVIOUS TASK
  debug:
    var: output.dest

- name: 2.3 RENDER AND APPLY THE SEGMENT ROUTING CONFIGURATION
  cisco.iosxr.iosxr_config:
    src: "{{ templates[0] }}"
    match: none

- name: "{{ mins }} minutes PAUSE FOR CONVERGENCE"
  ansible.builtin.pause:
    minutes: "{{ mins }}"

- name: 2.4 RUN COMMANDS TO VERIFY SR AND LDP STATE
  cisco.iosxr.iosxr_command:
    commands:
    - "{{ item }}"
  loop: "{{ command_set_1 }}"
  when: hostname == "PE1"
  register: output

- name: 2.5 DISPLAY THE OUTPUT REGISTERED IN THE PREVIOUS TASK
  debug:
    msg:
    - "{{ output.results[idx].stdout_lines }}"
  loop: "{{ command_set_1 }}"
  loop_control:
    index_var: idx
  when: hostname == "PE1"

- name: 2.6 RENDER AND DISPLAY THE SR-PREFER CONFIGURATION
  debug:
    msg: 
    - "template: {{ templates[1] }}"
    - "{{ lookup('template', templates[1]).split('\n') }}"

- name: 2.7 RENDER AND SAVE THE SR-PREFER CONFIGURATION
  template:
    src: "{{ templates[1] }}"
    dest: "xrcfg/{{ hostname }}.srprefer.xrcfg"
  register: output

- name: "{{ slow_secs }} secs PAUSE FOR CONVERGENCE"
  ansible.builtin.pause:
    seconds: "{{ slow_secs }}"

- name: 2.8 DISPLAY THE OUTPUT REGISTERED IN THE PREVIOUS TASK
  debug:
    var: output.dest

- name: 2.9 RENDER AND APPLY THE SR-PREFER CONFIGURATION
  cisco.iosxr.iosxr_config:
    src: "{{ templates[1] }}"
    match: none

- name: "{{ mins }} minutes PAUSE FOR CONVERGENCE"
  ansible.builtin.pause:
    minutes: "{{ mins }}"

- name: 2.10 RUN COMMANDS TO VERIFY SR-PREFER STATE 
  cisco.iosxr.iosxr_command:
    commands:
    - "{{ item }}"
  loop: "{{ command_set_2 }}"
  when: hostname == "PE1"
  register: output

- name: 2.11 DISPLAY THE OUTPUT REGISTERED IN THE PREVIOUS TASK
  debug:
    msg:
    - "{{ output.results[idx].stdout_lines }}"
  loop: "{{ command_set_2 }}"
  loop_control:
    index_var: idx
  when: hostname == "PE1"